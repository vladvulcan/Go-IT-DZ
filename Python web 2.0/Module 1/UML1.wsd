@startuml

class Field {
    -_value: object
    +value: object
    {abstract} +value(value: object): void
}

class Name {
    +value(name: str): void
}

class Phone {
    +value(new_phone: str): void
}

class Birthday {
    +value(birthday: str): void
}

class Record {
    -name: Name
    -phones: List[Phone]
    -birthday: Birthday
    +__init__(name: str, phone: Optional[str] = None, birthday: Optional[str] = None)
    +__repr__(): str
    +add_phone(phone: str): None
    +clear_phones(): None
    +delete_phone(index: int): None
    +find_phone(phone: str) -> Tuple[bool, int]
    +days_to_birthday() -> int
    +search_in_phones(query: str) -> str
}

class AddressBook {
    -data: Dict[str, Record]
    +add_record(record: Record): None
    +update_record(name: str, phone: str): None
    +get_phones(name: str) -> List[str]
    +remove_record(name: str): None
    +clear_phones(name: str): None
    +delete_phone(name: str, phone: str): None
    +iterator(num_iterations: int = 5) -> Iterator[List[Record]]
}

class Bot {
    -memory: AddressBook
    +__init__()
    +input_error(func: Callable) -> Callable
    +calculate_days_to_birthday(name: str) -> int
    +get_birthday(name: str) -> datetime.date
    +say_hello() -> str
    +say_goodbye() -> str
    +save_and_exit() -> str
    +show_help() -> str
}

Bot o-- AddressBook
AddressBook o-- Record
Record --|> Field
Name --|> Field
Phone --|> Field
Birthday --|> Field

@enduml